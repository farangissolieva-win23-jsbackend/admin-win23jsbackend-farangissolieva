@page "/account/courses"
@using adminWebApp.Models
@using adminWebApp.Services

@inherits LayoutComponentBase
@attribute [Authorize]
@attribute [StreamRendering]
@inject GraphQLService GraphQLService

<section id="courses">
	<div class="container">
				
		<div class="heading">
			<h2 class="title">Courses</h2>
			<div class="tool-bar">
				<form id="categoryForm" method="get">
					<a class="btn-theme" href="/courses/addcourse"><i class="fa-regular fa-plus"></i> New Course</a>
					<div class="inputgroup">
						<select id="categories" @* @bind="SelectedCategoryId" *@ @onchange="OnCategoryChange">
							<option value="">All Categories</option>
							@if (Categories != null)
							{
								@foreach (var category in Categories)
								{
									<option value="@category.Id">@category.Name</option>
								}
							}
						</select>
						<i class="fa-regular fa-chevron-down"></i>
					</div>

					<div class="inputgroup">
						<input type="text" id="searchInput" name="searchQuery" placeholder="Search courses..." @bind="SearchQuery">
						<i class="fa-regular fa-magnifying-glass"></i>
					</div>
				</form>
			</div>
		</div>
		@if (!string.IsNullOrEmpty(MessageText))
		{
			<StatusMessage Message="@MessageText" />
		}
		<div class="content-contaier">
			@if (courses == null)
			{
				<p><em>No courses founded yet. Please wait...</em></p>
			} else
			{
				@foreach (var course in courses)
				{
					var selectedCourse = course;
					<div class="course-item">
						<div class="image-container">
							<img src="@course.ImgUrl" />
					</div>

						<div class="info">
							<h5 >@course.Title</h5>
							<p>By @course.AuthorName</p>
							<div class="price">
								@if (course.Discount == 0)
								{
									<p>$@course.Price</p>
								}
								else
								{
									<p><span class="red">$@course.Discount</span> <span class="gray">$@course.Price</span></p>
								}

							</div>

							<hr />
							<div class="duration-rating">
								<div class="duration"><i class="fa-regular fa-clock"></i> @course.Hours</div>
								<div class="rating">
									<i class="fa-sharp fa-light fa-thumbs-up"></i>
									<p>94%</p>
									<p>@course.Reviews</p>
								</div>
							</div>
						</div>

						<div class="button-group">
							<a class="btn-gray" href="@($"courses/course/{selectedCourse.Id}")">Edit</a>
							<a class="btn-red" href="@($"courses/deleteCourse/{selectedCourse.Id}")">Delete</a>
						</div>
						
					</div>
				}
				

			}	
			
		</div>
	</div>
</section>

@code {
	
	[SupplyParameterFromQuery]
	public string? MessageText { get; set; }

	[SupplyParameterFromQuery]
	public string? ReturnUrl { get; set; }

	private List<CategoryModel>? Categories { get; set; }
	public string? SearchQuery { get; set; }
	public int? SelectedCategoryId { get; set; }

	private List<CourseModel>? courses;
	private List<CourseModel>? allCourses = new List<CourseModel>();


	protected override async Task OnInitializedAsync()
	{
		await LoadCoursesAsync();
		// await LoadCategoriesAsync();

	}

	private async Task LoadCoursesAsync()
	{
		try
		{
			var query = new GraphQLQuery
				{
					Query = "{ getCourses { id title likes likePercentage isBestseller imgUrl authors{authorName} prices{price discount} hours reviews } }"
				};
			
			var response = await Http.PostAsJsonAsync(Configuration["CoursesGraphQLApiUri"], query);
			if (response.IsSuccessStatusCode)
			{
				var jsonResponse = await response.Content.ReadAsStringAsync();
				var result = System.Text.Json.JsonSerializer.Deserialize<DynamicGraphQLResponse>(jsonResponse);
				allCourses = result?.Data.GetProperty("getCourses").EnumerateArray()
					.Select(course => new CourseModel
						{
							Id = course.GetProperty("id").GetString()!,
							Title = course.GetProperty("title").GetString(),
							Likes = course.GetProperty("likes").GetString(),
							LikePercentage = course.GetProperty("likePercentage").GetString(),
							IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
							ImgUrl = course.GetProperty("imgUrl").GetString(),
							AuthorName = course.GetProperty("authors").EnumerateArray().First().GetProperty("authorName").GetString()!,
							Price = course.GetProperty("prices").GetProperty("price").GetDecimal(),
							Discount = course.GetProperty("prices").GetProperty("discount").GetDecimal(),
							Hours = course.GetProperty("hours").GetString(),
							Reviews = course.GetProperty("reviews").GetString(),
							

					})
					.ToList() ?? new List<CourseModel>();
				courses = new List<CourseModel>(allCourses!);
			}

		}
		catch (Exception ex)
		{

			MessageText = $"error: Something went wrong. Try again!";
			Console.WriteLine(ex);
		}
	}

	// private async Task LoadCategoriesAsync()
	// {
	// 	try
	// 	{
	// 		var categoriesQuery = new GraphQLQuery
	// 			{
	// 				Query = "{ getCourses { categoryEntity { id name } } }"
	// 			};
	// 		var response = await Http.PostAsJsonAsync(Configuration["CoursesGraphQLApiUri"], categoriesQuery);
	// 		if (response.IsSuccessStatusCode)
	// 		{
	// 			var jsonResponse = await response.Content.ReadAsStringAsync();
	// 			var result = System.Text.Json.JsonSerializer.Deserialize<DynamicGraphQLResponse>(jsonResponse);

	// 			var categoryArray = result!.Data.GetProperty("getCourses").EnumerateArray()
	// 				.Select(course => new CategoryModel
	// 					{
	// 						Id = course.GetProperty("categoryEntity").GetProperty("id").GetInt32(),
	// 						Name = course.GetProperty("categoryEntity").GetProperty("name").GetString()!
	// 					})
	// 				.ToList() ?? new List<CategoryModel>();

	// 			Categories = categoryArray
	// 				.GroupBy(c => c.Id)
	// 				.Select(g => g.First())
	// 				.ToList();
	// 		}
	// 	}
	// 	catch (Exception ex)
	// 	{
	// 		MessageText = $"error: Something went wrong while loading categories. Try again! {ex}";
	// 	}
	// }

	public void OnCategoryChange(ChangeEventArgs e)
	{
		SelectedCategoryId = int.Parse(e.Value?.ToString() ?? "0");

		if (SelectedCategoryId.HasValue && SelectedCategoryId != 0)
		{
			courses = allCourses?.Where(course => course.Category?.Id == SelectedCategoryId).ToList();
		}
		else
		{
			courses = new List<CourseModel>(allCourses!);
		}
	}

	private void CreateNewCourse()
	{
		NavigationManager.NavigateTo("/create-course");
	}

	private void EditCourse(CourseModel course)
	{
		NavigationManager.NavigateTo($"/edit-course/{course.Id}");
	}

	

}

















