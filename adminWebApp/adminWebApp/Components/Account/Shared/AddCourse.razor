@page "/courses/addcourse"
@using adminWebApp.Models
@using adminWebApp.Services
@inject GraphQLService GraphQLService
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (CourseForm != null)
{
    <div class="singleCourse">
        <div class="container">
            <h1>Create New Course</h1>
            <EditForm Model="CourseForm" FormName="addcourse" OnValidSubmit="HandleValidSubmit" novalidate>
                <DataAnnotationsValidator />

                <div class="input-group">
                    <label>Title:</label>
                    <InputText @bind-Value="CourseForm.Title" />
                </div>
                <div class="input-group">
                    <label>Ingress:</label>
                    <InputTextArea @bind-Value="CourseForm.Ingress" />
                </div>
                <div class="input-group">
                    <label>Author:</label>
                    <InputTextArea @bind-Value="CourseForm.Authors[0].AuthorName" />
                </div>
                <div class="input-group">
                    <label>Hours:</label>
                    <InputText @bind-Value="CourseForm.Hours" />
                </div>
                <div class="input-group">
                    <label>Image Title URL:</label>
                    <InputText @bind-Value="CourseForm.ImgUrl" />
                </div>
                <div class="input-group">
                    <label>Image Header URL:</label>
                    <InputText @bind-Value="CourseForm.ImgHeaderUrl" />
                </div>

                <div class="input-group">
                    <label>Reviews:</label>
                    <InputTextArea @bind-Value="CourseForm.Reviews" />
                </div>
                <div class="input-group">
                    <label>Likes:</label>
                    <InputTextArea @bind-Value="CourseForm.Likes" />
                </div>
                <div class="input-group">
                    <label>Like Percentage:</label>
                    <InputText @bind-Value="CourseForm.LikePercentage" />
                </div>
                
                <div class="input-group">
                    <label>Content Description:</label>
                    <InputTextArea @bind-Value="CourseForm.Content.Description" />
                </div>
                                           
                <div class="input-group">
                    <label>Price:</label>
                    <InputNumber @bind-Value="CourseForm.Prices.Price" />
                </div>
                <div class="input-group">
                    <label>Discount:</label>
                    <InputNumber @bind-Value="CourseForm.Prices.Discount" />
                </div>
                <div class="input-group">
                    <label>Currency:</label>
                    <InputText @bind-Value="CourseForm.Prices.Currency" />
                </div>
                <div class="input-group">
                    <label>Is Bestseller:</label>
                    <InputCheckbox @bind-Value="CourseForm.IsBestseller" />
                </div>
                <div class="input-group">
                    <label>Is Digital:</label>
                    <InputCheckbox @bind-Value="CourseForm.IsDigital" />
                </div>
               
                <div class="button-group input-group">
                    <button class="btn-theme" type="submit">Create Course</button>
                </div>

            </EditForm>
        </div>
    </div>


}
else
{
    <p>Loading...</p>
}



@code {
    [Parameter]
    public string? CourseId { get; set; }

    [SupplyParameterFromForm]
    private Course CourseForm { get; set; } = null!;
       

    protected override async Task OnInitializedAsync()
    {
        CourseForm = new Course
            {
                Prices = new(),
                Content = new(),
                Authors = new List<Author>(){new() {AuthorName = ""}}
            };
    }

       
    private async Task HandleValidSubmit()
    {
        bool success = await AddCourseAsync(CourseForm);
        if (success)
        {
            Navigation.NavigateTo("/account/courses");
        }
        else
        {

        }
    }

    private async Task<bool> AddCourseAsync(Course course)
    {
        var createCourseMutation = @"mutation($input: CourseCreateRequestInput!) { createCourse(input: $input) {
               
                title
                imgUrl
                imgHeaderUrl
                isDigital
                isBestseller
                ingress
                reviews
                likes
                likePercentage
                hours
                prices {
                    currency
                    price
                    discount
                }
                content {
                    description
                }
                authors {
                    authorName
                }
        }}";
        var input = new
        {
            input = new CourseCreateRequest
                {
                    Title = course.Title,
                    ImageUrl = course.ImgUrl,
                    ImageHeaderUrl = course.ImgHeaderUrl,
                    IsDigital = course.IsDigital,
                    IsBestseller = course.IsBestseller,
                    Ingress = course.Ingress,
                    Reviews = course.Reviews,
                    Likes = course.Likes,
                    LikePercentage = course.LikePercentage,
                    Hours = course.Hours,
                    Prices = new PriceCreateRequest
                    {
                        Currency = course.Prices?.Currency,
                        Price = course.Prices?.Price ?? 0,
                        Discount = course.Prices?.Discount ?? 0
                    },
                    Content = new ContentCreateRequest
                    {
                        Description = course.Content?.Description,
                        
                    },
                    Authors = new List<AuthorCreateRequest>
                    {
                        new AuthorCreateRequest
                        {
                            Id = 2,
                            AuthorName = course.Authors?[0].AuthorName
                        }
                    }

                }
        };
        try
        {
            var response = await Http.PostAsJsonAsync(Configuration["CoursesGraphQLApiUri"], new { query = createCourseMutation, variables = input });
            if (response.IsSuccessStatusCode)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex);
            return false;
        }

    }




}
